# power_ir_analysis.tcl
# Performs dynamic power analysis and dynamic rail (IR drop) analysis.
# Loops through the 4 power pad configurations generated by pnr_pdn.tcl.
# Saves results into uniquely named subdirectories under $env(OUTPUT_DIR)/Data/.

puts "INFO: === Step: Power and IR Drop Analysis ==="

# --- Check Required Environment Variables ---
set required_vars {
    OUTPUT_DIR UTILIZATION_FACTOR PDN_SETTING DECAP_OPTION ORIGINAL_DIR_NAME
    EXTRACTION_TECH_FILE
}
foreach var $required_vars {
    if {![info exists env($var)]} {
        puts "ERROR: Missing required environment variable for Analysis: $var"
        exit 1
    }
}

# --- Define Paths Relative to OUTPUT_DIR ---
set out_dir             $env(OUTPUT_DIR)
set pgv_lib_path        "${out_dir}/tech_pgv/techonly.cl/"
set power_pad_dir       "${out_dir}/power_pads" # Location of .pp files
set dynamic_power_dir   "${out_dir}/dynamicPowerResults" # Temporary dir
set dynamic_rail_dir    "${out_dir}/dynamic_rail_results"  # Temporary dir
set final_results_base  "${out_dir}/Data" # Base directory for final saved results

# Ensure needed inputs exist
if {![file isdirectory $pgv_lib_path]} {
    puts "ERROR: PGV library not found: $pgv_lib_path. Run pgv_generation first."
    exit 1
}
if {![file isdirectory $power_pad_dir]} {
    puts "ERROR: Power Pad directory not found: $power_pad_dir. Ensure pnr_pdn ran successfully."
    exit 1
}

# Create temporary directories
file mkdir $dynamic_power_dir
file mkdir $dynamic_rail_dir

# -------------------------
# 1. Dynamic Power Analysis (Run Once)
# -------------------------
puts "INFO: Performing Dynamic Power Analysis (Vectorless)..."
set_power -reset
set_power_analysis_mode -reset
set_power_analysis_mode \
    -method dynamic_vectorless \
    -disable_static false \
    -analysis_view typical \
    -power_grid_library $pgv_lib_path \
    -extraction_tech_file "$env(EXTRACTION_TECH_FILE)"

set_power_output_dir $dynamic_power_dir

if {[catch {report_power -instances * -cell * -outfile "${dynamic_power_dir}/dyn_power_summary.rpt"} result]} {
    puts "ERROR: Failed during dynamic power reporting: $result"
    exit 1
}

# Check if essential output files (.ptiavg) were created
if {![file exists "${dynamic_power_dir}/dynamic_VDD.ptiavg"] || \
    ![file exists "${dynamic_power_dir}/dynamic_VSS.ptiavg"]} {
    puts "ERROR: Dynamic power analysis did not generate expected output files (.ptiavg) in $dynamic_power_dir"
    exit 1
}
puts "INFO: Dynamic Power Analysis completed. Intermediate results in $dynamic_power_dir"


# -------------------------
# 2. Dynamic Rail (IR Drop) Analysis (Loop for each Power Pad config)
# -------------------------
puts "INFO: Starting Dynamic Rail (IR Drop) Analysis loop..."

foreach pp_config {1 2 3 4} {
    puts "\nINFO: --- Analyzing Power Pad Configuration: PP${pp_config} ---"

    # Define the unique final output directory for this specific run
    # $env(ORIGINAL_DIR_NAME) already contains the design/util/pdn/dcap info
    set analysis_run_name "${env(ORIGINAL_DIR_NAME)}_PP${pp_config}"
    set final_output_subdir "${final_results_base}/${analysis_run_name}"
    if {[catch {file mkdir $final_output_subdir}]} {
         puts "WARNING: Could not create final output directory '$final_output_subdir', might exist."
    }
    puts "INFO: Final results will be saved in: $final_output_subdir"

    # --- Setup Rail Analysis ---
    set_power -reset
    set_rail_analysis_mode -reset
    set_rail_analysis_mode \
        -method dynamic \
        -analysis_view typical \
        -generate_decap_eco false \
        -accuracy hd \
        -limit_number_of_steps false \
        -power_grid_library $pgv_lib_path \
        -enable_rlrp_analysis true \
        -verbosity true

    # Define voltage sources and thresholds - ADJUST AS NEEDED
    set_pg_nets -net VDD -voltage 1.1 -threshold 1.0
    set_pg_nets -net VSS -voltage 0.0 -threshold 0.1
    set_rail_analysis_domain -name ALL -pwrnets VDD -gndnets VSS

    # --- Set Power Pad Files for this iteration ---
    set vdd_pp_file "${power_pad_dir}/VDD${pp_config}.pp"
    set vss_pp_file "${power_pad_dir}/VSS${pp_config}.pp"
    if {![file exists $vdd_pp_file] || ![file exists $vss_pp_file]} {
        puts "ERROR: Power pad files not found for PP${pp_config}: $vdd_pp_file or $vss_pp_file"
        exit 1 # Cannot proceed without these
    }
    set_power_pads -reset
    set_power_pads -net VDD -format xy -file $vdd_pp_file
    set_power_pads -net VSS -format xy -file $vss_pp_file
    puts "INFO: Using power pad files: $vdd_pp_file, $vss_pp_file"

    # --- Link Dynamic Power Data ---
    set_power_data -format current [list \
        "${dynamic_power_dir}/dynamic_VDD.ptiavg" \
        "${dynamic_power_dir}/dynamic_VSS.ptiavg" \
    ]

    # --- Run Rail Analysis ---
    puts "INFO: Running analyze_rail for PP${pp_config}..."
    if {[catch {analyze_rail -output $dynamic_rail_dir -type domain ALL} result]} {
         puts "ERROR: analyze_rail failed for PP${pp_config}: $result"
         exit 1 # Cannot proceed if analysis fails
    }

    # --- Report and Save Results ---
    # Check common locations for rail results - adjust if your tool version differs
    set rail_result_dir_vdd "${dynamic_rail_dir}/ALL_typical_dynamic/VDD"
    if {![file isdirectory $rail_result_dir_vdd]} {
         set rail_result_dir_vdd "${dynamic_rail_dir}/ALL_25C_dynamic/VDD" # Try Voltus default
         if {![file isdirectory $rail_result_dir_vdd]} {
            puts "ERROR: Dynamic rail results directory for VDD not found in $dynamic_rail_dir."
            exit 1
        }
    }
    puts "INFO: Reading rail results from: $rail_result_dir_vdd"

    if {[catch {read_power_rail_results -rail_directory $rail_result_dir_vdd} result]} {
        puts "ERROR: Failed to read rail results: $result"
        exit 1
    }

    # Save dynamic rail (IR drop) result report
    set ir_report_file "${final_output_subdir}/route_dynamic_ir.rpt"
    puts "INFO: Saving IR drop report to: $ir_report_file"
    if {[catch {report_power_rail_results -plot ir -limit 100000 -ignore_limit_bound -filename $ir_report_file} result]} {
         puts "WARNING: Failed to generate IR report: $result" # Non-fatal warning
    }
    read_power_rail_results -reset -force

    # --- Save Design Files and Other Reports ---
    puts "INFO: Saving final DEF and TWF files for ${analysis_run_name}..."
    # Use consistent naming within the final directory
    if {[catch {defOut -floorplan -unplaced -netlist -routing "${final_output_subdir}/detailed_route.def.gz"} result]} {
         puts "WARNING: Failed to save DEF: $result"
    }
    if {[catch {write_timing_windows "${final_output_subdir}/cts.twf" -view typical} result]} {
         puts "WARNING: Failed to save TWF: $result"
    }

    # Copy overall dynamic power summary report
    set source_power_report "${dynamic_power_dir}/dyn_power_summary.rpt"
    if {[file exists $source_power_report]} {
        file copy -force $source_power_report "${final_output_subdir}/"
    }
    # Copy specific power pad files used
    file copy -force $vdd_pp_file "${final_output_subdir}/"
    file copy -force $vss_pp_file "${final_output_subdir}/"

    puts "INFO: --- Analysis and saving complete for PP${pp_config} ---"

} # End of foreach pp_config loop


puts "\nINFO: === Power and IR Drop Analysis Complete ==="
